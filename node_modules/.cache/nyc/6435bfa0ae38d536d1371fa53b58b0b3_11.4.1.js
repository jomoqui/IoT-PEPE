'use strict';// te permite quitar errores como que el this no contenga información del global o que no hay reasignación de variables
var cov_b1c8rg6td=function(){var path='/Users/pepemoralesquiles/proyectoNode/platziverse/platziversedb/index.js',hash='1baf4553b5aa42a51398a04f0dea7eb1706b46b7',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/pepemoralesquiles/proyectoNode/platziverse/platziversedb/index.js',statementMap:{'0':{start:{line:3,column:22},end:{line:3,column:44}},'1':{start:{line:4,column:25},end:{line:4,column:56}},'2':{start:{line:5,column:24},end:{line:5,column:53}},'3':{start:{line:6,column:17},end:{line:6,column:36}},'4':{start:{line:9,column:0},end:{line:48,column:1}},'5':{start:{line:11,column:0},end:{line:21,column:2}},'6':{start:{line:24,column:20},end:{line:24,column:41}},'7':{start:{line:25,column:21},end:{line:25,column:44}},'8':{start:{line:26,column:22},end:{line:26,column:46}},'9':{start:{line:28,column:2},end:{line:28,column:33}},'10':{start:{line:29,column:2},end:{line:29,column:35}},'11':{start:{line:33,column:2},end:{line:33,column:32}},'12':{start:{line:37,column:2},end:{line:39,column:3}},'13':{start:{line:38,column:4},end:{line:38,column:41}},'14':{start:{line:41,column:16},end:{line:41,column:18}},'15':{start:{line:42,column:17},end:{line:42,column:19}},'16':{start:{line:44,column:2},end:{line:47,column:3}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:9,column:17},end:{line:9,column:18}},loc:{start:{line:9,column:41},end:{line:48,column:1}},line:9}},branchMap:{'0':{loc:{start:{line:37,column:2},end:{line:39,column:3}},type:'if',locations:[{start:{line:37,column:2},end:{line:39,column:3}},{start:{line:37,column:2},end:{line:39,column:3}}],line:37}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0},f:{'0':0},b:{'0':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const setupDatabase=(cov_b1c8rg6td.s[0]++,require('./lib/db.js'));// requerimos las funciones que hemos defino antes
const setupMetricModel=(cov_b1c8rg6td.s[1]++,require('./models/metricas.js'));const setupAgentModel=(cov_b1c8rg6td.s[2]++,require('./models/agente.js'));const defaults=(cov_b1c8rg6td.s[3]++,require('defaults'));cov_b1c8rg6td.s[4]++;module.exports=async function(config){cov_b1c8rg6td.f[0]++;cov_b1c8rg6td.s[5]++;// como es asincrona siempre que la ejecute me devuelve una promesa
config=defaults(config,{// le pasamos datos de configuración para hacer las  pruebas unitaras
dialect:'sqlite',//no hace falta utilizat la bbdd que vamos a tener en pro las pruebas
pool:{max:10,min:0,idle:10000},query:{raw:true// para que me de un json en formato facil para poder leerlo bien
}});const sequelize=(cov_b1c8rg6td.s[6]++,setupDatabase(config));const AgentModel=(cov_b1c8rg6td.s[7]++,setupAgentModel(config));// configuración del modelo de agente
const MetricModel=(cov_b1c8rg6td.s[8]++,setupMetricModel(config));// esto se hace para hacer mocks y  hacer pruebas
cov_b1c8rg6td.s[9]++;AgentModel.hasMany(MetricModel);// Son modelos se sequelize, es como definir la bbdd(SQL) para hacer la relación entre tablas
cov_b1c8rg6td.s[10]++;MetricModel.belongsTo(AgentModel);// crean las tablas y las llaves foraneas de las tablas
// se pone el await para esperar la respuesta de la función se podria hacer con el .then
// se conecta a la base de datos y comprueba(Esta funcion es una promesa, podria poner.then)
cov_b1c8rg6td.s[11]++;await sequelize.authenticate();// sequelize.sync()
cov_b1c8rg6td.s[12]++;if(config.setup){cov_b1c8rg6td.b[0][0]++;cov_b1c8rg6td.s[13]++;await sequelize.sync({force:true});// si la bbdd existe la borra y crea una nueva
}else{cov_b1c8rg6td.b[0][1]++;}const Agent=(cov_b1c8rg6td.s[14]++,{});const Metric=(cov_b1c8rg6td.s[15]++,{});cov_b1c8rg6td.s[16]++;return{Agent,Metric};};