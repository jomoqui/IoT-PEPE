'use strict';var cov_x1d3y5uxy=function(){var path='/Users/pepemoralesquiles/proyectoNode/platziverse/platziversedb/tests/agent-tests.js',hash='b94c4ea399ed203d61bc0ac5f8159d82be0d58f6',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/pepemoralesquiles/proyectoNode/platziverse/platziversedb/tests/agent-tests.js',statementMap:{'0':{start:{line:3,column:30},end:{line:3,column:5630}},'1':{start:{line:4,column:27},end:{line:4,column:486}},'2':{start:{line:4,column:74},end:{line:4,column:93}},'3':{start:{line:4,column:96},end:{line:4,column:236}},'4':{start:{line:4,column:166},end:{line:4,column:219}},'5':{start:{line:4,column:220},end:{line:4,column:233}},'6':{start:{line:4,column:237},end:{line:4,column:454}},'7':{start:{line:4,column:328},end:{line:4,column:341}},'8':{start:{line:4,column:343},end:{line:4,column:362}},'9':{start:{line:4,column:363},end:{line:4,column:451}},'10':{start:{line:4,column:455},end:{line:4,column:482}},'11':{start:{line:6,column:13},end:{line:6,column:27}},'12':{start:{line:9,column:13},end:{line:11,column:1}},'13':{start:{line:12,column:9},end:{line:12,column:13}},'14':{start:{line:14,column:0},end:{line:17,column:3}},'15':{start:{line:15,column:24},end:{line:15,column:43}},'16':{start:{line:16,column:2},end:{line:16,column:35}},'17':{start:{line:19,column:0},end:{line:30,column:3}},'18':{start:{line:20,column:13},end:{line:20,column:39}},'19':{start:{line:22,column:2},end:{line:29,column:23}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:4,column:27},end:{line:4,column:28}},loc:{start:{line:4,column:39},end:{line:4,column:484}},line:4},'1':{name:'PowerAssertRecorder',decl:{start:{line:4,column:50},end:{line:4,column:69}},loc:{start:{line:4,column:72},end:{line:4,column:95}},line:4},'2':{name:'_capt',decl:{start:{line:4,column:143},end:{line:4,column:148}},loc:{start:{line:4,column:164},end:{line:4,column:235}},line:4},'3':{name:'_expr',decl:{start:{line:4,column:284},end:{line:4,column:289}},loc:{start:{line:4,column:305},end:{line:4,column:453}},line:4},'4':{name:'(anonymous_4)',decl:{start:{line:10,column:11},end:{line:10,column:12}},loc:{start:{line:10,column:23},end:{line:10,column:25}},line:10},'5':{name:'(anonymous_5)',decl:{start:{line:14,column:16},end:{line:14,column:17}},loc:{start:{line:14,column:28},end:{line:17,column:1}},line:14},'6':{name:'(anonymous_6)',decl:{start:{line:19,column:14},end:{line:19,column:15}},loc:{start:{line:19,column:19},end:{line:30,column:1}},line:19}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var _powerAssertVisitorKeys=(cov_x1d3y5uxy.s[0]++,'{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}'),_powerAssertRecorder=(cov_x1d3y5uxy.s[1]++,function(){cov_x1d3y5uxy.f[0]++;function PowerAssertRecorder(){cov_x1d3y5uxy.f[1]++;cov_x1d3y5uxy.s[2]++;this.captured=[];}cov_x1d3y5uxy.s[3]++;PowerAssertRecorder.prototype._capt=function _capt(value,espath){cov_x1d3y5uxy.f[2]++;cov_x1d3y5uxy.s[4]++;this.captured.push({value:value,espath:espath});cov_x1d3y5uxy.s[5]++;return value;};cov_x1d3y5uxy.s[6]++;PowerAssertRecorder.prototype._expr=function _expr(value,source){cov_x1d3y5uxy.f[3]++;var capturedValues=(cov_x1d3y5uxy.s[7]++,this.captured);cov_x1d3y5uxy.s[8]++;this.captured=[];cov_x1d3y5uxy.s[9]++;return{powerAssertContext:{value:value,events:capturedValues},source:source};};cov_x1d3y5uxy.s[10]++;return PowerAssertRecorder;}());const test=(cov_x1d3y5uxy.s[11]++,require('ava'));//para test unitarios
let config=(cov_x1d3y5uxy.s[12]++,{logging:function(){cov_x1d3y5uxy.f[4]++;}});let db=(cov_x1d3y5uxy.s[13]++,null);cov_x1d3y5uxy.s[14]++;test.beforeEach(async()=>{cov_x1d3y5uxy.f[5]++;const setupDatabase=(cov_x1d3y5uxy.s[15]++,require('../index'));cov_x1d3y5uxy.s[16]++;db=await setupDatabase(config);});cov_x1d3y5uxy.s[17]++;test('Agent',t=>{cov_x1d3y5uxy.f[6]++;var _rec=(cov_x1d3y5uxy.s[18]++,new _powerAssertRecorder());cov_x1d3y5uxy.s[19]++;t.truthy(_rec._expr(_rec._capt(_rec._capt(db,'arguments/0/object').Agent,'arguments/0'),{content:'t.truthy(db.Agent, \'Agente existe\')',filepath:'tests/agent-tests.js',line:19,ast:'{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[9,11]},"property":{"type":"Identifier","name":"Agent","range":[12,17]},"computed":false,"range":[9,17]},{"type":"StringLiteral","value":"Agente existe","range":[19,34]}],"range":[0,35]}',tokens:'[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"db","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"Agent","range":[12,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"string"},"value":"Agente existe","range":[19,34]},{"type":{"label":")"},"range":[34,35]}]',visitorKeys:_powerAssertVisitorKeys}),'Agente existe');});/* let config = {
  logging: function(){}
}
let db = null

test.beforeEach(async() => {
  const setupDatabase = require('../lib/db.js')
  db = await setupDatabase(config)
})

test('Agent', t => {
  t.truthy(db.Agent, 'Agente existe')  //truthy que exita el valor que no sea 0
})
*///# sourceMappingURL=/Users/pepemoralesquiles/proyectoNode/platziverse/platziversedb/node_modules/.cache/ava/2a9bd9c86e467e3ba38439c9164b30b3.js.map